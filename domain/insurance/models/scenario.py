# coding: utf-8

"""
    Insurance Policy Schema

    OpenAPI schema defining insurance-related decision-making structures.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from .decision import Decision
from .decision_metric import DecisionMetric
from .state import State

class Scenario(BaseModel):
    """
    Scenario
    """
    decisions: Optional[conlist(Decision)] = None
    description: Optional[StrictStr] = Field(default=None, description="Description of the scenario")
    id_: Optional[StrictStr] = Field(default=None, description="Unique identifier for the scenario")
    metrics: Optional[Dict[str, DecisionMetric]] = None
    state: Optional[State] = None
    __properties = ["decisions", "description", "id_", "metrics", "state"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Scenario:
        """Create an instance of Scenario from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in decisions (list)
        _items = []
        if self.decisions:
            for _item in self.decisions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['decisions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in metrics (dict)
        _field_dict = {}
        if self.metrics:
            for _key in self.metrics:
                if self.metrics[_key]:
                    _field_dict[_key] = self.metrics[_key].to_dict()
            _dict['metrics'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Scenario:
        """Create an instance of Scenario from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Scenario.parse_obj(obj)

        _obj = Scenario.parse_obj({
            "decisions": [Decision.from_dict(_item) for _item in obj.get("decisions")] if obj.get("decisions") is not None else None,
            "description": obj.get("description"),
            "id_": obj.get("id_"),
            "metrics": dict(
                (_k, DecisionMetric.from_dict(_v))
                for _k, _v in obj.get("metrics").items()
            )
            if obj.get("metrics") is not None
            else None,
            "state": State.from_dict(obj.get("state")) if obj.get("state") is not None else None
        })
        return _obj


