# coding: utf-8

"""
    Insurance Policy Schema

    OpenAPI schema defining insurance-related decision-making structures.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from insurance.models.decision_explanations_inner import DecisionExplanationsInner
from insurance.models.decision_metric import DecisionMetric
from insurance.models.decision_value import DecisionValue
from typing import Optional, Set
from typing_extensions import Self

class Decision(BaseModel):
    """
    Decision
    """ # noqa: E501
    id_: Optional[StrictStr] = Field(default=None, description="Unique identifier for the decision")
    value: Optional[DecisionValue] = None
    justifications: Optional[List[StrictStr]] = Field(default=None, description="List of justifications for the decision")
    explanations: Optional[List[DecisionExplanationsInner]] = Field(default=None, description="List of explanations for the decision")
    metrics: Optional[Dict[str, DecisionMetric]] = None
    kdmas: Optional[List[Dict[str, Any]]] = Field(default=None, description="List of KDMAs associated with the decision")
    favors_choice: Optional[StrictBool] = Field(default=None, description="Whether the decision-maker favors choice")
    favors_risk: Optional[StrictBool] = Field(default=None, description="Whether the decision-maker favors risk")
    __properties: ClassVar[List[str]] = ["id_", "value", "justifications", "explanations", "metrics", "kdmas", "favors_choice", "favors_risk"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Decision from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict['value'] = self.value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in explanations (list)
        _items = []
        if self.explanations:
            for _item_explanations in self.explanations:
                if _item_explanations:
                    _items.append(_item_explanations.to_dict())
            _dict['explanations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in metrics (dict)
        _field_dict = {}
        if self.metrics:
            for _key_metrics in self.metrics:
                if self.metrics[_key_metrics]:
                    _field_dict[_key_metrics] = self.metrics[_key_metrics].to_dict()
            _dict['metrics'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Decision from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id_": obj.get("id_"),
            "value": DecisionValue.from_dict(obj["value"]) if obj.get("value") is not None else None,
            "justifications": obj.get("justifications"),
            "explanations": [DecisionExplanationsInner.from_dict(_item) for _item in obj["explanations"]] if obj.get("explanations") is not None else None,
            "metrics": dict(
                (_k, DecisionMetric.from_dict(_v))
                for _k, _v in obj["metrics"].items()
            )
            if obj.get("metrics") is not None
            else None,
            "kdmas": obj.get("kdmas"),
            "favors_choice": obj.get("favors_choice"),
            "favors_risk": obj.get("favors_risk")
        })
        return _obj


