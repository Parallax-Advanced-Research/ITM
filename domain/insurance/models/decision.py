# coding: utf-8

"""
    Insurance Policy Schema

    OpenAPI schema defining insurance-related decision-making structures.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from .decision_explanations_inner import DecisionExplanationsInner
from .decision_metric import DecisionMetric
from .decision_value import DecisionValue

class Decision(BaseModel):
    """
    Decision
    """
    explanations: Optional[conlist(DecisionExplanationsInner)] = Field(default=None, description="List of explanations for the decision")
    favors_choice: Optional[StrictBool] = Field(default=None, description="Whether the decision favors choice")
    favors_risk: Optional[StrictBool] = Field(default=None, description="Whether the decision favors risk")
    id_: Optional[StrictStr] = Field(default=None, description="Unique identifier for the decision")
    justifications: Optional[conlist(StrictStr)] = Field(default=None, description="List of justifications for the decision")
    kdmas: Optional[conlist(Dict[str, Any])] = Field(default=None, description="List of KDMAs associated with the decision")
    metrics: Optional[Dict[str, DecisionMetric]] = None
    value: Optional[DecisionValue] = None
    __properties = ["explanations", "favors_choice", "favors_risk", "id_", "justifications", "kdmas", "metrics", "value"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Decision:
        """Create an instance of Decision from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in explanations (list)
        _items = []
        if self.explanations:
            for _item in self.explanations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['explanations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in metrics (dict)
        _field_dict = {}
        if self.metrics:
            for _key in self.metrics:
                if self.metrics[_key]:
                    _field_dict[_key] = self.metrics[_key].to_dict()
            _dict['metrics'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict['value'] = self.value.to_dict()
        return _dict

    @property
    def kdma_map(self) -> dict:
        """Create a kdma_map interface compatible with internal Decision format"""
        kdma_map = {}
        if self.kdmas:
            for kdma_dict in self.kdmas:
                if isinstance(kdma_dict, dict):
                    kdma_map.update(kdma_dict)
        return kdma_map

    def get_features(self) -> dict:
        """Extract features from the decision for case-based reasoning"""
        features = {}
        
        # Add basic decision info
        if self.id_:
            features['decision_id'] = self.id_
        if self.favors_choice is not None:
            features['favors_choice'] = self.favors_choice
        if self.favors_risk is not None:
            features['favors_risk'] = self.favors_risk
            
        # Add decision value info
        if self.value:
            if hasattr(self.value, 'name') and self.value.name:
                features['action_type'] = self.value.name
            else:
                features['action_type'] = 'unknown'
        else:
            features['action_type'] = 'unknown'
                
        # Add metrics if available
        if self.metrics:
            for metric_name, metric in self.metrics.items():
                if metric and hasattr(metric, 'value') and metric.value is not None:
                    features[f'metric_{metric_name}'] = metric.value
                    
        return features

    @classmethod
    def from_dict(cls, obj: dict) -> Decision:
        """Create an instance of Decision from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Decision.parse_obj(obj)

        _obj = Decision.parse_obj({
            "explanations": [DecisionExplanationsInner.from_dict(_item) for _item in obj.get("explanations")] if obj.get("explanations") is not None else None,
            "favors_choice": obj.get("favors_choice"),
            "favors_risk": obj.get("favors_risk"),
            "id_": obj.get("id_"),
            "justifications": obj.get("justifications"),
            "kdmas": obj.get("kdmas"),
            "metrics": dict(
                (_k, DecisionMetric.from_dict(_v))
                for _k, _v in obj.get("metrics").items()
            )
            if obj.get("metrics") is not None
            else None,
            "value": DecisionValue.from_dict(obj.get("value")) if obj.get("value") is not None else None
        })
        return _obj


