# coding: utf-8

"""
    Insurance Policy Schema

    OpenAPI schema defining insurance-related decision-making structures.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from insurance.models.decision import Decision
from insurance.models.state import State
from insurance.models.tad_probe_environment import TADProbeEnvironment

class TADProbe(BaseModel):
    """
    TADProbe
    """
    decisions: Optional[conlist(Decision)] = Field(default=None, description="List of decisions associated with the probe")
    environment: Optional[TADProbeEnvironment] = None
    id_: Optional[StrictStr] = Field(default=None, description="Unique identifier for the probe")
    prompt: Optional[StrictStr] = Field(default=None, description="Prompt associated with the probe")
    state: Optional[State] = None
    __properties = ["decisions", "environment", "id_", "prompt", "state"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TADProbe:
        """Create an instance of TADProbe from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in decisions (list)
        _items = []
        if self.decisions:
            for _item in self.decisions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['decisions'] = _items
        # override the default output from pydantic by calling `to_dict()` of environment
        if self.environment:
            _dict['environment'] = self.environment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TADProbe:
        """Create an instance of TADProbe from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TADProbe.parse_obj(obj)

        _obj = TADProbe.parse_obj({
            "decisions": [Decision.from_dict(_item) for _item in obj.get("decisions")] if obj.get("decisions") is not None else None,
            "environment": TADProbeEnvironment.from_dict(obj.get("environment")) if obj.get("environment") is not None else None,
            "id_": obj.get("id_"),
            "prompt": obj.get("prompt"),
            "state": State.from_dict(obj.get("state")) if obj.get("state") is not None else None
        })
        return _obj


