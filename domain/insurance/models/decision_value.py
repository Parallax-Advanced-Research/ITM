# coding: utf-8

"""
    Insurance Policy Schema

    OpenAPI schema defining insurance-related decision-making structures.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from insurance.models.decision_explanations_inner_params_value import DecisionExplanationsInnerParamsValue

class DecisionValue(BaseModel):
    """
    DecisionValue
    """
    name: Optional[StrictStr] = Field(default=None, description="Name of the action")
    params: Optional[Dict[str, DecisionExplanationsInnerParamsValue]] = Field(default=None, description="Parameters of the action")
    __properties = ["name", "params"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DecisionValue:
        """Create an instance of DecisionValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in params (dict)
        _field_dict = {}
        if self.params:
            for _key in self.params:
                if self.params[_key]:
                    _field_dict[_key] = self.params[_key].to_dict()
            _dict['params'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DecisionValue:
        """Create an instance of DecisionValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DecisionValue.parse_obj(obj)

        _obj = DecisionValue.parse_obj({
            "name": obj.get("name"),
            "params": dict(
                (_k, DecisionExplanationsInnerParamsValue.from_dict(_v))
                for _k, _v in obj.get("params").items()
            )
            if obj.get("params") is not None
            else None
        })
        return _obj


