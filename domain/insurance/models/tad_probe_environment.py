# coding: utf-8

"""
    Insurance Policy Schema

    OpenAPI schema defining insurance-related decision-making structures.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from insurance.models.tad_probe_environment_decision_environment import TADProbeEnvironmentDecisionEnvironment

class TADProbeEnvironment(BaseModel):
    """
    Environment details for the probe  # noqa: E501
    """
    decision_environment: Optional[TADProbeEnvironmentDecisionEnvironment] = None
    __properties = ["decision_environment"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TADProbeEnvironment:
        """Create an instance of TADProbeEnvironment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of decision_environment
        if self.decision_environment:
            _dict['decision_environment'] = self.decision_environment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TADProbeEnvironment:
        """Create an instance of TADProbeEnvironment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TADProbeEnvironment.parse_obj(obj)

        _obj = TADProbeEnvironment.parse_obj({
            "decision_environment": TADProbeEnvironmentDecisionEnvironment.from_dict(obj.get("decision_environment")) if obj.get("decision_environment") is not None else None
        })
        return _obj


