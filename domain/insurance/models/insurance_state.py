# coding: utf-8

"""
    Insurance Policy Schema

    OpenAPI schema defining insurance-related decision-making structures.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, validator

class InsuranceState(BaseModel):
    """
    InsuranceState
    """
    children_under_12: Optional[StrictInt] = None
    children_under_18: Optional[StrictInt] = None
    children_under_26: Optional[StrictInt] = None
    children_under_4: Optional[StrictInt] = None
    distance_dm_home_to_employer_hq: Optional[Union[StrictFloat, StrictInt]] = None
    employment_type: Optional[StrictStr] = None
    expense_type: Optional[StrictStr] = None
    kdma: Optional[StrictStr] = None
    kdma_value: Optional[StrictStr] = None  # old way of it, kdma is low/high, not number Optional[Union[StrictFloat, StrictInt]] = None
    network_status: Optional[StrictStr] = None
    no_of_medical_visits_previous_year: Optional[StrictInt] = None
    owns_rents: Optional[StrictStr] = None
    percent_family_members_that_play_sports: Optional[Union[StrictFloat, StrictInt]] = None
    percent_family_members_with_chronic_condition: Optional[Union[StrictFloat, StrictInt]] = None
    travel_location_known: Optional[StrictBool] = None
    val1: Optional[Union[StrictFloat, StrictInt]] = None
    val2: Optional[Union[StrictFloat, StrictInt]] = None
    val3: Optional[Union[StrictFloat, StrictInt]] = None
    val4: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["children_under_12", "children_under_18", "children_under_26", "children_under_4", "distance_dm_home_to_employer_hq", "employment_type", "expense_type", "kdma", "kdma_value", "network_status", "no_of_medical_visits_previous_year", "owns_rents", "percent_family_members_that_play_sports", "percent_family_members_with_chronic_condition", "travel_location_known", "val1", "val2", "val3", "val4"]

    @validator('employment_type')
    def employment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Salaried', 'Bonus', 'Hourly',):
            raise ValueError("must be one of enum values ('Salaried', 'Bonus', 'Hourly')")
        return value

    @validator('expense_type')
    def expense_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('COST IN $', 'MAXIMUM COST', 'PERCENT PLAN PAYS', 'CO-PAY IN $',):
            raise ValueError("must be one of enum values ('COST IN $', 'MAXIMUM COST', 'PERCENT PLAN PAYS', 'CO-PAY IN $')")
        return value

    @validator('network_status')
    def network_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('TIER 1 NETWORK', 'IN-NETWORK', 'OUT-OF-NETWORK', 'GENERIC', 'ANY CHOICE BRAND',):
            raise ValueError("must be one of enum values ('TIER 1 NETWORK', 'IN-NETWORK', 'OUT-OF-NETWORK', 'GENERIC', 'ANY CHOICE BRAND')")
        return value

    @validator('owns_rents')
    def owns_rents_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Rents', 'Owns',):
            raise ValueError("must be one of enum values ('Rents', 'Owns')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InsuranceState:
        """Create an instance of InsuranceState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InsuranceState:
        """Create an instance of InsuranceState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InsuranceState.parse_obj(obj)

        _obj = InsuranceState.parse_obj({
            "children_under_12": obj.get("children_under_12"),
            "children_under_18": obj.get("children_under_18"),
            "children_under_26": obj.get("children_under_26"),
            "children_under_4": obj.get("children_under_4"),
            "distance_dm_home_to_employer_hq": obj.get("distance_dm_home_to_employer_hq"),
            "employment_type": obj.get("employment_type"),
            "expense_type": obj.get("expense_type"),
            "kdma": obj.get("kdma"),
            "kdma_value": obj.get("kdma_value"),
            "network_status": obj.get("network_status"),
            "no_of_medical_visits_previous_year": obj.get("no_of_medical_visits_previous_year"),
            "owns_rents": obj.get("owns_rents"),
            "percent_family_members_that_play_sports": obj.get("percent_family_members_that_play_sports"),
            "percent_family_members_with_chronic_condition": obj.get("percent_family_members_with_chronic_condition"),
            "travel_location_known": obj.get("travel_location_known"),
            "val1": obj.get("val1"),
            "val2": obj.get("val2"),
            "val3": obj.get("val3"),
            "val4": obj.get("val4")
        })
        return _obj


