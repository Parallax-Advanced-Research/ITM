# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

image: registry.basic-research.parallaxgc.org/github-mirrors/itm/ci:latest

stages:
#- build
- test
- integration_test_soartech
- integration_test_adept
- integration_test_eval
- individual_tests
#- deploy
#- review
#- dast
#- staging
#- canary
#- production
#- incremental rollout 10%
#- incremental rollout 25%
#- incremental rollout 50%
#- incremental rollout 100%
#- performance
#- cleanup
#sast:
#  stage: test

include:
#- template: Auto-DevOps.gitlab-ci.yml
 - template: Jobs/SAST.gitlab-ci.yml
 - template: Jobs/Secret-Detection.gitlab-ci.yml

before_script:
   - export HOME=/home/itm
   - mkdir -p "$HOME/.ssh"
   - echo "$CI_ACCESS_KEY" > "$HOME/.ssh/id_rsa"
   - chmod 600 "$HOME/.ssh/id_rsa"
   - echo -e "Host github.com\n\tHostName github.com\n\tUser git\n\tIdentityFile ~/.ssh/id_rsa\n\tPasswordAuthentication no\n\tStrictHostKeyChecking no\n" > $HOME/.ssh/config
   - chmod 600 $HOME/.ssh/config
   - touch $HOME/.ssh/known_hosts
   - CI/install_libs.sh
   - python install.py
   - source venv/bin/activate


lint_tools:
  stage: test
  allow_failure: true
  script:
    - python run_tests.py --notest

unit_tests:
  stage: test
  script:
    - python run_tests.py --nolint -v

#psuedo_test:
#  # Used to make the individual tests run iff integration_test fails
#  needs: integration_test
#  stage: test
#  script:
#    - true

integration_test_soartech:
  needs: []
  stage: integration_test_soartech
  script:
    - python run-servers.py
    - sleep 2 # TODO: race condition. run-servers should not exit until servers are listening to their ports
    - python tad_tester.py --no-verbose --session_type soartech --ebd --mc --br --keds --kedsd --csv --bayes
    - python stop-servers.py
  # TODO: run separate jobs with various --no-foo options, so we can see what specifically fails?
  # Ideally, only do that if the single everything job fails.
  # TODO: can't rely on constant output, since decisions change as TAD is improved, but should be able sanity check it somewhat

integration_test_adept:
  needs: []
  stage: integration_test_adept
  script:
    - python run-servers.py
    - sleep 2 # TODO: race condition. run-servers should not exit until servers are listening to their ports
    - python tad_tester.py --no-verbose --session_type adept --ebd --mc --br --keds --kedsd --csv --bayes
    - python stop-servers.py
  # TODO: run separate jobs with various --no-foo options, so we can see what specifically fails?
  # Ideally, only do that if the single everything job fails.
  # TODO: can't rely on constant output, since decisions change as TAD is improved, but should be able sanity check it somewhat

integration_test_eval:
  needs: []
  stage: integration_test_eval
  script:
    - python run-servers.py
    - sleep 2 # TODO: race condition. run-servers should not exit until servers are listening to their ports
    - python tad_tester.py --no-verbose --session_type eval --ebd --mc --br --keds --kedsd --csv --bayes
    - python stop-servers.py
  # TODO: run separate jobs with various --no-foo options, so we can see what specifically fails?
  # Ideally, only do that if the single everything job fails.
  # TODO: can't rely on constant output, since decisions change as TAD is improved, but should be able sanity check it somewhat

# TODO: Also have individual tests with --session_type adept and eval?
integration_test_install:
  stage: individual_tests
  needs: [ integration_test_soartech ]
  when: on_failure
  script:
    - python run-servers.py

integration_test_ebd:
  stage: individual_tests
  needs: [ integration_test_install ]
  script:
    - python run-servers.py
    - sleep 2 # TODO: race condition. run-servers should not exit until servers are listening to their ports
    - python tad_tester.py --no-verbose --session_type soartech --ebd --no-mc --no-br --no-keds --no-kedsd --no-csv --no-bayes
    - python stop-servers.py

integration_test_mc:
  stage: individual_tests
  needs: [ integration_test_install ]
  script:
    - python run-servers.py
    - sleep 2 # TODO: race condition. run-servers should not exit until servers are listening to their ports
    - python tad_tester.py --no-verbose --session_type soartech --no-ebd --mc --no-br --no-keds --no-kedsd --no-csv --no-bayes
    - python stop-servers.py

integration_test_br:
  stage: individual_tests
  needs: [ integration_test_install ]
  script:
    - python run-servers.py
    - sleep 2 # TODO: race condition. run-servers should not exit until servers are listening to their ports
    - python tad_tester.py --no-verbose --session_type soartech --no-ebd --no-mc --br --no-keds --no-kedsd --no-csv --no-bayes
    - python stop-servers.py

integration_test_keds:
  stage: individual_tests
  needs: [ integration_test_install ]
  script:
    - python run-servers.py
    - sleep 2 # TODO: race condition. run-servers should not exit until servers are listening to their ports
    - python tad_tester.py --no-verbose --session_type soartech --no-ebd --no-mc --no-br --keds --no-kedsd --no-csv --no-bayes
    - python stop-servers.py

integration_test_kedsd:
  stage: individual_tests
  needs: [ integration_test_install ]
  script:
    - python run-servers.py
    - sleep 2 # TODO: race condition. run-servers should not exit until servers are listening to their ports
    - python tad_tester.py --no-verbose --session_type soartech --no-ebd --no-mc --no-br --no-keds --kedsd --no-csv --no-bayes
    - python stop-servers.py

integration_test_csv:
  stage: individual_tests
  needs: [ integration_test_install ]
  script:
    - python run-servers.py
    - sleep 2 # TODO: race condition. run-servers should not exit until servers are listening to their ports
    - python tad_tester.py --no-verbose --session_type soartech --no-ebd --no-mc --no-br --no-keds --no-kedsd --csv --no-bayes
    - python stop-servers.py

integration_test_bayes:
  stage: individual_tests
  needs: [ integration_test_install ]
  script:
    - python run-servers.py
    - sleep 2 # TODO: race condition. run-servers should not exit until servers are listening to their ports
    - python tad_tester.py --no-verbose --session_type soartech --no-ebd --no-mc --no-br --no-keds --no-kedsd --no-csv --bayes
    - python stop-servers.py

