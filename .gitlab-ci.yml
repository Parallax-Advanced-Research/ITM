# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

image: registry.basic-research.parallaxgc.org/github-mirrors/itm/ci:latest

stages:
#- build
- test
- individual_tests
#- deploy
#- review
#- dast
#- staging
#- canary
#- production
#- incremental rollout 10%
#- incremental rollout 25%
#- incremental rollout 50%
#- incremental rollout 100%
#- performance
#- cleanup
#sast:
#  stage: test

include:
#- template: Auto-DevOps.gitlab-ci.yml
 - template: Jobs/SAST.gitlab-ci.yml
 - template: Jobs/Secret-Detection.gitlab-ci.yml

before_script:
  - mkdir -p "$HOME/.ssh"
  - echo "$CI_ACCESS_KEY" > "$HOME/.ssh/id_rsa"
  - chmod 600 "$HOME/.ssh/id_rsa"
  #- echo -e "Host github.com\n\tHostName github.com\n\tUser git\n\tIdentityFile ~/.ssh/id_rsa\n\tPasswordAuthentication no\n\tStrictHostKeyChecking no\n" > $HOME/.ssh/config
  - echo -e "Host github.com\n\tHostName github.com\n\tUser git\n\tIdentityFile ~/.ssh/id_rsa\n\tPasswordAuthentication no\n" > $HOME/.ssh/config
  # github.com keys
  - echo -e '|1|OHw9rY0DDYyp5+HeM5jWt0XiZhQ=|aH0N3qZCrtB08tssZYzMri/3uJc= ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl\n|1|buENn9Vhuzd9Qv8O2C/JMiHntdE=|OLaKZvmqGVnPCO2w5D7xvbKZuLY= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=\n|1|rSpjqSIU5JTUZHCPIAd/hAKMcPs=|rrVdO0LDSawmFWaaCBUKcN3I5E8= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=' >> ~/.ssh/known_hosts
  - chmod 600 $HOME/.ssh/config
  - CI/install_libs.sh
  - python install.py
  - source venv/bin/activate

lint_tools:
  stage: test
  allow_failure: true
  script:
    - python run_tests.py --notest

unit_tests:
  stage: test
  script:
    - python run_tests.py --nolint -v

integration_test:
  stage: test
  script:
    - python run-servers.py
    - sleep 2 # TODO: race condition. run-servers should not exit until servers are listening to their ports
    - python tad_tester.py --no-verbose --session_type soartech
    - python stop-servers.py
  # TODO: run separate jobs with various --no-foo options, so we can see what specifically fails?
  # Ideally, only do that if the single everything job fails.
  # TODO: can't rely on constant output, since decisions change as TAD is improved, but should be able sanity check it somewhat

