diff --git a/swagger_server/controllers/itm_ta2_eval_controller.py b/swagger_server/controllers/itm_ta2_eval_controller.py
index 9c36cfc..1ee902a 100644
--- a/swagger_server/controllers/itm_ta2_eval_controller.py
+++ b/swagger_server/controllers/itm_ta2_eval_controller.py
@@ -1,5 +1,6 @@
 import connexion
 import time
+import sys
 
 from swagger_server.models.action import Action  # noqa: E501
 from ..itm import ITMSession
@@ -98,6 +99,7 @@ def start_scenario(session_id, scenario_id=None):  # noqa: E501
     :rtype: Scenario
     """
     session = _get_session(session_id)
+    sys.stderr.write(f"Session scenarios: {[scenario.id for scenario in session.itm_scenarios]}\n")
     return session.start_scenario(scenario_id=scenario_id) if session else ('Invalid Session ID', 400)
 
 def _reclaim_old_session():
diff --git a/swagger_server/itm/itm_scene.py b/swagger_server/itm/itm_scene.py
index 1b133b0..0af74ee 100644
--- a/swagger_server/itm/itm_scene.py
+++ b/swagger_server/itm/itm_scene.py
@@ -31,7 +31,7 @@ class ITMScene:
         self.restricted_actions :List[ActionTypeEnum] = scene.restricted_actions
         self.transition_semantics :SemanticTypeEnum = scene.transition_semantics
         self.transitions :Conditions = scene.transitions
-        self.training = False
+        self.training = True
         from .itm_scenario import ITMScenario
         self.parent_scenario :ITMScenario = None
 
diff --git a/swagger_server/itm/itm_session.py b/swagger_server/itm/itm_session.py
index cde68c6..b7c3778 100644
--- a/swagger_server/itm/itm_session.py
+++ b/swagger_server/itm/itm_session.py
@@ -106,7 +106,8 @@ class ITMSession:
             ITMSession.init_ta1_data(ta1_names)
             ITMSession.ta1_connected = True
             logging.info("Done.")
-        except:
+        except Exception as ex:
+            logging.warning(f"Exception is {ex}")
             logging.warning("Could not initialize TA1 data. Running standalone with local alignment targets.")
 
         # If we couldn't use data from TA1, initialize with local data.
@@ -137,6 +138,12 @@ class ITMSession:
                 alignment_target for alignment_target in ITMTa1Controller.get_alignment_data(ta1_name)
                     if 'train' not in alignment_target.id or ta1_name == 'soartech'
             ]
+            ITMSession.alignment_data[ta1_name] = [
+                alignment_target for alignment_target in ITMSession.alignment_data[ta1_name]
+                    if alignment_target.id is not None
+                    and 'train' not in alignment_target.id
+                    and 'target-6-eval' not in alignment_target.id
+            ]
             ITMSession.ta1_controllers[ta1_name] = [
                 ITMTa1Controller(alignment_target_id=alignment_target.id,
                                  scene_type=ta1_name,
@@ -148,7 +155,6 @@ class ITMSession:
     def _check_scenario_id(self, scenario_id: str) -> None:
         """
         Check if the provided scenario ID matches the session's scenario ID.
-
         Args:
             scenario_id: The scenario ID to compare.
         """
@@ -470,7 +476,7 @@ class ITMSession:
         else:
             ta1_names.append(self.session_type)
         if kdma_training:
-            self.ta1_integration = True
+            self.ta1_integration = "ta1" in self.adm_name
             self.return_scenario_history = True
         if session_type == 'test':
             self.ta1_integration = False
@@ -509,8 +515,11 @@ class ITMSession:
             ta1_scenarios = []
             scenario_ctr = 0
             for scenario in scenarios:
+                yaml_path=f'{path}{scenario}'
+                if not os.path.exists(yaml_path):
+                    continue
                 itm_scenario = \
-                    ITMScenario(yaml_path=f'{path}{scenario}',
+                    ITMScenario(yaml_path=yaml_path,
                                 session=self, training=self.kdma_training)
                 itm_scenario.generate_scenario_data()
 
diff --git a/swagger_server/itm/itm_ta1_controller.py b/swagger_server/itm/itm_ta1_controller.py
index 995ae8e..cb5b395 100644
--- a/swagger_server/itm/itm_ta1_controller.py
+++ b/swagger_server/itm/itm_ta1_controller.py
@@ -38,11 +38,11 @@ class ITMTa1Controller:
         host_port = ITMTa1Controller.get_contact_info(scene_type=scene_type)
         target_id_path = 'alignment_target_ids' if scene_type == 'adept' else 'alignment_targets'
         url = f"{host_port}/api/v1/{target_id_path}"
-        alignment_target_ids = json.loads(requests.get(url).content.decode('utf-8'))
+        alignment_target_ids = json.loads(requests.get(url, verify=False).content.decode('utf-8'))
         alignments = []
         for alignment_target_id in alignment_target_ids:
           url = f"{host_port}/api/v1/alignment_target/{alignment_target_id}"
-          response = requests.get(url)
+          response = requests.get(url, verify=False)
           alignment_target = ITMTa1Controller.to_dict(response)
           alignments.append(AlignmentTarget.from_dict(alignment_target))
         return alignments
@@ -56,7 +56,7 @@ class ITMTa1Controller:
         if user_id:
             params = {"user_id": user_id}
             url = f"{url}?{urllib.parse.urlencode(params)}"
-        initial_response = requests.post(url)
+        initial_response = requests.post(url, verify=False)
         initial_response.raise_for_status()
         response = self.to_dict(initial_response)
         self.session_id = response
@@ -65,7 +65,7 @@ class ITMTa1Controller:
     def post_probe(self, probe_response: ProbeResponse):
         body = {"session_id": self.session_id, "response": probe_response.to_dict()}
         url = f"{self.url}/api/v1/response"
-        self.to_dict(requests.post(url, json=body))
+        self.to_dict(requests.post(url, json=body, verify=False))
         return None
     
     def get_probe_response_alignment(self, scenario_id, probe_id):
@@ -78,7 +78,7 @@ class ITMTa1Controller:
             "probe_id": probe_id
         }
         url = f"{base_url}?{urllib.parse.urlencode(params)}"
-        initial_response = requests.get(url)
+        initial_response = requests.get(url, verify=False)
         initial_response.raise_for_status()
         response = self.to_dict(initial_response)
         return response
@@ -90,7 +90,7 @@ class ITMTa1Controller:
             "target_id": self.alignment_target_id if not target_id else target_id
         }
         url = f"{base_url}?{urllib.parse.urlencode(params)}"
-        initial_response = requests.get(url)
+        initial_response = requests.get(url, verify=False)
         initial_response.raise_for_status()
         response = self.to_dict(initial_response)
         alignment_results :AlignmentResults = AlignmentResults.from_dict(response)
@@ -101,7 +101,7 @@ class ITMTa1Controller:
             "session_id": self.session_id
         }
         url = f"{base_url}?{urllib.parse.urlencode(params)}"
-        initial_response = requests.get(url)
+        initial_response = requests.get(url, verify=False)
         initial_response.raise_for_status()
         response = self.to_dict(initial_response)
         # KDMAs are represented slightly differently between the two TA1s.
