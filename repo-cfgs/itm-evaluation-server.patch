diff --git a/swagger_server/config.ini b/swagger_server/config.ini
new file mode 100755
index 0000000..7c6a557
--- /dev/null
+++ b/swagger_server/config.ini
@@ -0,0 +1,17 @@
+; Copy over this template file and rename it to config.ini
+; Replace the default configurations below with the desired values
+
+[DEFAULT]
+
+EVALUATION_TYPE=dryrun
+SCENARIO_DIRECTORY=../../scenarios/%(EVALUATION_TYPE)s/
+
+; Prod Default URLs
+SOARTECH_URL=http://localhost:8084
+ADEPT_URL=http://localhost:8081
+
+SAVE_HISTORY=True
+SAVE_HISTORY_TO_S3=False
+
+HISTORY_DIRECTORY=itm_history_output
+HISTORY_S3_BUCKET=itm-ui-assets
diff --git a/swagger_server/controllers/itm_ta2_eval_controller.py b/swagger_server/controllers/itm_ta2_eval_controller.py
index 9c36cfc..1ee902a 100644
--- a/swagger_server/controllers/itm_ta2_eval_controller.py
+++ b/swagger_server/controllers/itm_ta2_eval_controller.py
@@ -1,5 +1,6 @@
 import connexion
 import time
+import sys
 
 from swagger_server.models.action import Action  # noqa: E501
 from ..itm import ITMSession
@@ -98,6 +99,7 @@ def start_scenario(session_id, scenario_id=None):  # noqa: E501
     :rtype: Scenario
     """
     session = _get_session(session_id)
+    sys.stderr.write(f"Session scenarios: {[scenario.id for scenario in session.itm_scenarios]}\n")
     return session.start_scenario(scenario_id=scenario_id) if session else ('Invalid Session ID', 400)
 
 def _reclaim_old_session():
diff --git a/swagger_server/itm/itm_scene.py b/swagger_server/itm/itm_scene.py
index 1b133b0..0af74ee 100644
--- a/swagger_server/itm/itm_scene.py
+++ b/swagger_server/itm/itm_scene.py
@@ -31,7 +31,7 @@ class ITMScene:
         self.restricted_actions :List[ActionTypeEnum] = scene.restricted_actions
         self.transition_semantics :SemanticTypeEnum = scene.transition_semantics
         self.transitions :Conditions = scene.transitions
-        self.training = False
+        self.training = True
         from .itm_scenario import ITMScenario
         self.parent_scenario :ITMScenario = None
 
diff --git a/swagger_server/itm/itm_session.py b/swagger_server/itm/itm_session.py
index f47733b..30b071a 100644
--- a/swagger_server/itm/itm_session.py
+++ b/swagger_server/itm/itm_session.py
@@ -96,7 +96,8 @@ class ITMSession:
             ITMSession.init_ta1_data(ta1_names)
             ITMSession.ta1_connected = True
             logging.info("Done.")
-        except:
+        except Exception as ex:
+            logging.warning(f"Exception is {ex}")
             logging.warning("Could not initialize TA1 data. Running standalone with local alignment targets.")
 
         # If we couldn't use data from TA1, initialize with local data.
@@ -460,7 +461,7 @@ class ITMSession:
         else:
             ta1_names.append(self.session_type)
         if kdma_training:
-            self.ta1_integration = True
+            self.ta1_integration = "ta1" in self.adm_name
             self.return_scenario_history = True
         if session_type == 'test':
             self.ta1_integration = False
